name: 'Run SpecFlow Tests'

description: 'Github action to run SpecFlow tests and create LivingDoc artifact'
inputs:
  test-assembly-dll:
    description: "Relative path of <MySpecflowProject.dll> (example: MySpecflowProject/bin/Debug/netcoreapp3.1/MySpecflowProject.dll)"
    required: true
  test-execution-json:
    description: "Relative path of <MySpecflowProjectTestExecution(s).json> (example: MySpecflowProject/bin/Debug/netcoreapp3.1/TestExecution.json)"
    required: true
  output-html:
    description: "Name of Specflow LivingDoc output file (must end with .html)"
    required: false
    default: 'LivingDoc.html'
  verbosity:
    description: "Verbosity of the SpecFlow Test Execution (default = normal)"
    required: false
    default: 'normal'
  no-build:
    description: "Set to true to disable dotnet build and dotnet restore"
    required: false
    default: 'false'
  #upload-artifact: TODO
    #description: "Set to false to disable uploading <LivingDoc.html> artifact automatically"
    #required: false
    #default: 'true'
runs:
  using: composite
  steps:
    #- name: Checkout
      #uses: actions/checkout@v2
    #- name: Setup .NET Core
      #uses: actions/setup-dotnet@v1
      #with:
        #dotnet-version: 3.1.x
    - name: RunSpecFlowTests
      run: |
        if [ ${{ inputs.no-build }} == 'true' ]; then dotnet test --no-build --verbosity ${{ inputs. verbosity }}; else dotnet test --verbosity ${{ inputs. verbosity }}; fi
      shell: bash
    - name: GenerateSpecFlowLivingDoc
      run: |
        dotnet tool install --global SpecFlow.Plus.LivingDoc.CLI
        livingdoc test-assembly ${{ inputs.test-assembly-dll }} -t ${{ inputs.test-execution-json }} -o ${{ inputs.output-html }}
        #if [ ${{ inputs.upload-artifact }} == 'true' ]; then UPLOAD; fi
      shell: bash
    #- name: 'Publish Specflow Test Results'
      #uses: actions/upload-artifact@v2
      #with:
        #name: 'Specflow Test Results'
        #path: ${{ output-html }}